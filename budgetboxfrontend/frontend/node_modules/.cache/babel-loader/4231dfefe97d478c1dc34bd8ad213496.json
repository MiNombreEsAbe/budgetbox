{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\morenoa2\\\\Desktop\\\\budgetboxapp\\\\budgetboxfrontend\\\\frontend\\\\src\\\\containers\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, createRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Bar } from 'react-chartjs-2';\nimport Navigation from \"../components/default/Navigation\";\nimport Header from \"../components/default/Header\";\nimport { fetchExpenseReport, fetchLast4MonthsReport } from \"../redux/transactions/operations\";\nimport { updateBudget } from '../redux/users/operations';\nimport { getUser } from \"../redux/users/selectors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dashboard() {\n  _s();\n\n  const dispatch = useDispatch();\n  const selector = useSelector(state => state);\n  const expenseReports = selector[\"transaction\"]['expenseReports'];\n  const last4MonthsReport = selector[\"transaction\"]['last4monthsReport'];\n  const user = getUser(selector);\n  console.log(last4MonthsReport);\n  const defaultGap = 1000;\n  const nextBtnRef = useRef();\n  const prevBtnRef = useRef();\n  let [currentIndex, setCurrentIndex] = useState(3);\n  let [previousIndex, setPreviousIndex] = useState(4);\n  let [currentGap, setCurrentGap] = useState(1000);\n  let [isWeb, setIsWeb] = useState(null);\n  const [openModal, setOpenModal] = useState(false);\n  const [amount, setAmount] = useState(0);\n  useEffect(() => {\n    dispatch(fetchExpenseReport());\n    dispatch(fetchLast4MonthsReport());\n  }, []);\n\n  const handleResize = () => {\n    if (window.matchMedia(\"(max-width: 520px)\").matches) {\n      setIsWeb(false); // Reset Index and Gap\n\n      setCurrentIndex(3);\n      setPreviousIndex(4);\n      setCurrentGap(1000);\n    } else {\n      setIsWeb(true);\n    }\n  };\n\n  const largestReportAmount = Math.max.apply(Math, [{\n    total_amount: 0\n  }].concat(...last4MonthsReport).map(obj => {\n    return obj.total_amount;\n  }));\n  const chartGapAmount = Math.ceil(largestReportAmount * 1.3 / 7 / 100) * 100;\n  const highestGraphAmount = chartGapAmount * 7;\n  const chartHeight = 600;\n\n  const formatTotalAmount = amount => {\n    if (amount >= 1000000) {\n      return (amount / 1000000).toFixed(1) + \"M\";\n    }\n\n    if (amount >= 1000) {\n      return (amount / 1000).toFixed(1) + \"K\";\n    }\n\n    return amount;\n  };\n\n  const chartRefs = React.useRef([]);\n  chartRefs.current = last4MonthsReport.map((_, i) => {\n    var _chartRefs$current$i;\n\n    return (_chartRefs$current$i = chartRefs.current[i]) !== null && _chartRefs$current$i !== void 0 ? _chartRefs$current$i : /*#__PURE__*/createRef();\n  });\n\n  if (isWeb) {\n    // Clear style when web screen\n    if (chartRefs.current.length > 0) {\n      for (let i = 0; i < 4; i++) {\n        if (chartRefs.current[i].current) {\n          chartRefs.current[i].current.style.left = \"\";\n        }\n      }\n    }\n  }\n\n  if (currentIndex === 3 && prevBtnRef.current) prevBtnRef.current.style.display = 'none';\n\n  const nextChartHandler = () => {\n    prevBtnRef.current.style.display = 'block';\n    if (currentIndex === 1) nextBtnRef.current.style.display = 'none';\n    if (currentIndex === 0) return;\n    setPreviousIndex(--previousIndex);\n    setCurrentIndex(--currentIndex);\n    chartRefs.current[previousIndex].current.style.left = `calc(35% + ${currentGap}px)`;\n    chartRefs.current[currentIndex].current.style.left = `35%`;\n    setCurrentGap(currentGap + defaultGap);\n  };\n\n  const prevChartHandler = () => {\n    nextBtnRef.current.style.display = 'block';\n    if (currentIndex === 3) return;\n    chartRefs.current[currentIndex].current.style.left = `calc(35% - ${currentGap}px)`;\n    chartRefs.current[previousIndex].current.style.left = `35%`;\n    setCurrentIndex(++currentIndex);\n    setPreviousIndex(++previousIndex);\n    setCurrentGap(currentGap - defaultGap);\n  }; // asdasdasd\n\n\n  const updateAmountHandler = async () => {\n    dispatch(updateBudget(\"5000\", user.id));\n    dispatch(fetchExpenseReport()); // setOpenModal(false)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboardHolder\",\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {\n      active: \"dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboardContent\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"title\",\n          children: \"Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"barChart\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            id: \"q-graph\",\n            children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: last4MonthsReport.map((report, index) => {\n                let income = report.find(i => {\n                  return i.type === \"income\";\n                });\n                let expense = report.find(i => {\n                  return i.type === \"expense\";\n                });\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  ref: chartRefs.current[index],\n                  className: \"qtr\",\n                  id: `q${index + 1}`,\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    scope: \"row\",\n                    children: report[0].date\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 145,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"tooltip expense-bar bar\",\n                    style: {\n                      height: (expense ? expense.total_amount : 0) * chartHeight / highestGraphAmount\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"tooltiptext\",\n                      children: `$${expense ? formatTotalAmount(expense.total_amount) : 0}`\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 154,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"tooltip income-bar bar\",\n                    style: {\n                      height: (income ? income.total_amount : 0) * chartHeight / highestGraphAmount\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"tooltiptext\",\n                      children: `$${income ? formatTotalAmount(income.total_amount) : 0}`\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 166,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 158,\n                    columnNumber: 45\n                  }, this)]\n                }, `graph-${index}`, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 41\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Dashboard, \"Hben66IQZErdamh2UQfD2agN/aQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/morenoa2/Desktop/budgetboxapp/budgetboxfrontend/frontend/src/containers/Dashboard.js"],"names":["React","useState","useEffect","useRef","createRef","useDispatch","useSelector","Bar","Navigation","Header","fetchExpenseReport","fetchLast4MonthsReport","updateBudget","getUser","Dashboard","dispatch","selector","state","expenseReports","last4MonthsReport","user","console","log","defaultGap","nextBtnRef","prevBtnRef","currentIndex","setCurrentIndex","previousIndex","setPreviousIndex","currentGap","setCurrentGap","isWeb","setIsWeb","openModal","setOpenModal","amount","setAmount","handleResize","window","matchMedia","matches","largestReportAmount","Math","max","apply","total_amount","concat","map","obj","chartGapAmount","ceil","highestGraphAmount","chartHeight","formatTotalAmount","toFixed","chartRefs","current","_","i","length","style","left","display","nextChartHandler","prevChartHandler","updateAmountHandler","id","report","index","income","find","type","expense","date","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, createRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nimport Navigation from \"../components/default/Navigation\";\r\nimport Header from \"../components/default/Header\";\r\nimport { fetchExpenseReport, fetchLast4MonthsReport } from \"../redux/transactions/operations\";\r\nimport { updateBudget } from '../redux/users/operations';\r\nimport { getUser } from \"../redux/users/selectors\";\r\n\r\nexport default function Dashboard() {\r\n    const dispatch = useDispatch();\r\n\tconst selector = useSelector((state) => state);\r\n\tconst expenseReports = selector[\"transaction\"]['expenseReports'];\r\n\tconst last4MonthsReport = selector[\"transaction\"]['last4monthsReport'];\r\n\tconst user = getUser(selector);\r\n\r\n    console.log(last4MonthsReport)\r\n    \r\n\r\n    const defaultGap = 1000;\r\n\tconst nextBtnRef = useRef();\r\n\tconst prevBtnRef = useRef();\r\n\r\n\tlet [currentIndex, setCurrentIndex] = useState(3);\r\n\tlet [previousIndex, setPreviousIndex] = useState(4);\r\n\tlet [currentGap, setCurrentGap] = useState(1000);\r\n\tlet [isWeb, setIsWeb] = useState(null);\r\n\tconst [openModal, setOpenModal] = useState(false);\r\n\tconst [amount, setAmount] = useState(0);\r\n\r\n    useEffect(() => {\r\n\t\tdispatch(fetchExpenseReport());\r\n\t\tdispatch(fetchLast4MonthsReport());\r\n\t}, []);\r\n\r\n\tconst handleResize = () => {\r\n\t\tif (window.matchMedia(\"(max-width: 520px)\").matches) {\r\n\t\t\tsetIsWeb(false);\r\n\r\n\t\t\t// Reset Index and Gap\r\n\t\t\tsetCurrentIndex(3)\r\n\t\t\tsetPreviousIndex(4)\r\n\t\t\tsetCurrentGap(1000)\r\n\t\t} else {\r\n\t\t\tsetIsWeb(true);\r\n\t\t}\r\n\t};\r\n\r\n    const largestReportAmount = Math.max.apply(\r\n\t\tMath,\r\n\t\t[{ total_amount: 0 }].concat(...last4MonthsReport).map((obj) => {\r\n\t\t\treturn obj.total_amount;\r\n\t\t})\r\n\t);\r\n\r\n\tconst chartGapAmount = Math.ceil((largestReportAmount * 1.3) / 7 / 100) * 100;\r\n\tconst highestGraphAmount = chartGapAmount * 7;\r\n\tconst chartHeight = 600;\r\n\r\n\tconst formatTotalAmount = (amount) => {\r\n\t\tif (amount >= 1000000) {\r\n\t\t\treturn (amount / 1000000).toFixed(1) + \"M\";\r\n\t\t}\r\n\t\tif (amount >= 1000) {\r\n\t\t\treturn (amount / 1000).toFixed(1) + \"K\";\r\n\t\t}\r\n\t\treturn amount;\r\n\t};\r\n\r\n\tconst chartRefs = React.useRef([]);\r\n\r\n\tchartRefs.current = last4MonthsReport.map((_, i) => chartRefs.current[i] ?? createRef());\r\n\r\n\tif (isWeb) {\r\n\t\t// Clear style when web screen\r\n\t\tif (chartRefs.current.length > 0) {\r\n\t\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\t\tif (chartRefs.current[i].current) {\r\n\t\t\t\t\tchartRefs.current[i].current.style.left = \"\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tif(currentIndex === 3 && prevBtnRef.current) prevBtnRef.current.style.display = 'none'\r\n\r\n\tconst nextChartHandler = () => {\r\n\t\tprevBtnRef.current.style.display = 'block'\r\n\t\tif(currentIndex === 1) nextBtnRef.current.style.display = 'none'\r\n\t\tif (currentIndex === 0) return;\r\n\t\t\r\n\t\tsetPreviousIndex(--previousIndex);\r\n\t\tsetCurrentIndex(--currentIndex);\r\n\t\t\r\n\t\tchartRefs.current[previousIndex].current.style.left = `calc(35% + ${currentGap}px)`;\r\n\t\tchartRefs.current[currentIndex].current.style.left = `35%`;\r\n\t\tsetCurrentGap(currentGap + defaultGap);\r\n\t};\r\n\r\n\tconst prevChartHandler = () => {\r\n\t\tnextBtnRef.current.style.display = 'block'\r\n\t\tif (currentIndex === 3) return;\r\n\t\t\r\n\t\tchartRefs.current[currentIndex].current.style.left = `calc(35% - ${currentGap}px)`;\r\n\t\tchartRefs.current[previousIndex].current.style.left = `35%`;\r\n\r\n\t\tsetCurrentIndex(++currentIndex);\r\n\t\tsetPreviousIndex(++previousIndex);\r\n\t\tsetCurrentGap(currentGap - defaultGap);\r\n\t};\r\n\r\n    // asdasdasd\r\n\r\n    const updateAmountHandler = async () => {\r\n\t\tdispatch(updateBudget(\"5000\", user.id))\r\n\t\tdispatch(fetchExpenseReport());\r\n\t\t// setOpenModal(false)\r\n\t}\r\n\r\n    return (\r\n        <div className='dashboardHolder'>\r\n            <Navigation active=\"dashboard\" />\r\n            <div className=\"dashboard\">\r\n                <Header />\r\n                <div className=\"dashboardContent\">\r\n                    <p className=\"title\">Dashboard</p>\r\n                    <div className=\"barChart\">\r\n                        <table id=\"q-graph\">\r\n                            <tbody>\r\n                                {last4MonthsReport.map((report, index) => {\r\n                                    let income = report.find((i) => {\r\n                                        return i.type === \"income\";\r\n                                    });\r\n                                    let expense = report.find((i) => {\r\n                                        return i.type === \"expense\";\r\n                                    });\r\n                                    return (\r\n                                        <tr\r\n                                            ref={chartRefs.current[index]}\r\n                                            className=\"qtr\"\r\n                                            id={`q${index + 1}`}\r\n                                            key={`graph-${index}`}\r\n                                        >\r\n                                            <th scope=\"row\">{report[0].date}</th>\r\n                                            <td\r\n                                                className=\"tooltip expense-bar bar\"\r\n                                                style={{\r\n                                                    height:\r\n                                                        ((expense ? expense.total_amount : 0) * chartHeight) /\r\n                                                        highestGraphAmount,\r\n                                                }}\r\n                                            >\r\n                                                <span className=\"tooltiptext\">{`$${\r\n                                                    expense ? formatTotalAmount(expense.total_amount) : 0\r\n                                                }`}</span>\r\n                                            </td>\r\n                                            <td\r\n                                                className=\"tooltip income-bar bar\"\r\n                                                style={{\r\n                                                    height:\r\n                                                        ((income ? income.total_amount : 0) * chartHeight) /\r\n                                                        highestGraphAmount,\r\n                                                }}\r\n                                            >\r\n                                                <span className=\"tooltiptext\">{`$${\r\n                                                    income ? formatTotalAmount(income.total_amount) : 0\r\n                                                }`}</span>\r\n                                            </td>\r\n                                        </tr>\r\n                                    );\r\n                                })}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                    {/* <button onClick={updateAmountHandler}>Update</button> */}\r\n                </div>    \r\n            </div>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}