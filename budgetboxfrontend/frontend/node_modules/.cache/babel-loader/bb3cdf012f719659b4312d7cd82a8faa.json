{"ast":null,"code":"import axios from 'axios';\nexport const LOGIN_USER = 'BUDGET_NOTEBOOK_LOGIN_USER';\nlet baseURL;\n\nif (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\n  baseURL = process.env.REACT_APP_API_BASE_URL;\n} else {\n  baseURL = \"http://127.0.0.1:8000/api\";\n}\n\nconst api = axios.create({\n  baseURL: baseURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\napi.interceptors.request.use(config => {\n  if (config.requireToken) {\n    const user = localStorage.getItem(LOGIN_USER) ? JSON.parse(localStorage.getItem(LOGIN_USER)) : null; // console.log(user)\n\n    config.headers.common[\"Authorization\"] = user.id;\n  }\n\n  return config;\n}, err => console.error(err));\napi.interceptors.response.use(res => {\n  return res.data;\n}, err => {\n  if (err.response.status === 401) localStorage.removeItem(LOGIN_USER);\n  return Promise.reject(err);\n});\nexport default class API {\n  constructor() {\n    this.signUp = async body => {\n      const formData = new FormData();\n\n      for (const key in body) {\n        formData.append(key, body[key]);\n      }\n\n      return api.post(\"/users/create\", formData);\n    };\n\n    this.signIn = async body => {\n      const formData = new FormData();\n\n      for (const key in body) {\n        formData.append(key, body[key]);\n      }\n\n      return api.post(\"/users/auth\", formData);\n    };\n\n    this.updateProfile = async (body, id) => {\n      const formData = new FormData();\n\n      for (const key in body) {\n        formData.append(key, body[key]);\n      }\n\n      return api.put(`/users/update/${id}`, formData, {\n        requireToken: true\n      });\n    };\n\n    this.updateBudget = async (body, id) => {\n      const formData = new FormData();\n      formData.append('budget', body);\n      return api.put(`/users/updateBudget/${id}`, formData, {\n        requireToken: true\n      });\n    };\n\n    this.getTransactions = query => {\n      const {\n        page\n      } = query;\n      return api.get(\"/moneyEntry/list\", {\n        requireToken: true\n      });\n    };\n\n    this.addTransactions = body => {\n      const formData = new FormData();\n\n      for (const key in body) {\n        formData.append(key, body[key]);\n      }\n\n      return api.post(\"/moneyEntry/create\", formData, {\n        requireToken: true\n      });\n    };\n\n    this.updateTransactions = (body, id) => {\n      const formData = new FormData();\n\n      for (const key in body) {\n        formData.append(key, body[key]);\n      }\n\n      return api.put(`/moneyEntry/update/${id}`, formData, {\n        requireToken: true\n      });\n    };\n\n    this.deleteTransactions = id => {\n      return api.delete(`/moneyEntry/delete/${id}`, {\n        requireToken: true\n      });\n    };\n\n    this.getReportTransactions = async function () {\n      let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return api.get(\"/moneyEntry/reports\", {\n        params,\n        requireToken: true\n      });\n    };\n\n    this.getCategories = () => {\n      return api.get(\"/categories/list\", {\n        requireToken: true\n      });\n    };\n\n    this.getExpenseReport = () => {\n      return api.get('/moneyEntry/expense-reports', {\n        requireToken: true\n      });\n    };\n\n    this.getLast4MonthsReport = () => {\n      return api.get('/moneyEntry/reports', {\n        requireToken: true\n      });\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/morenoa2/Desktop/budgetboxapp/budgetboxfrontend/frontend/src/API.js"],"names":["axios","LOGIN_USER","baseURL","process","env","REACT_APP_ENVIRONMENT","REACT_APP_API_BASE_URL","api","create","headers","interceptors","request","use","config","requireToken","user","localStorage","getItem","JSON","parse","common","id","err","console","error","response","res","data","status","removeItem","Promise","reject","API","signUp","body","formData","FormData","key","append","post","signIn","updateProfile","put","updateBudget","getTransactions","query","page","get","addTransactions","updateTransactions","deleteTransactions","delete","getReportTransactions","params","getCategories","getExpenseReport","getLast4MonthsReport"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\nexport const LOGIN_USER = 'BUDGET_NOTEBOOK_LOGIN_USER';\r\n\r\nlet baseURL;\r\n\r\nif (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\r\n    baseURL = process.env.REACT_APP_API_BASE_URL;\r\n} else {\r\n    baseURL = \"http://127.0.0.1:8000/api\";\r\n}\r\n\r\nconst api = axios.create({\r\n    baseURL: baseURL,\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n});\r\n\r\napi.interceptors.request.use(\r\n\tconfig => {\r\n\t\tif (config.requireToken) {\r\n            const user = localStorage.getItem(LOGIN_USER) ? JSON.parse(localStorage.getItem(LOGIN_USER)) : null;\r\n\r\n\t\t\t// console.log(user)\r\n\t\t\tconfig.headers.common[\"Authorization\"] = user.id;\r\n\t\t}\r\n\r\n\t\treturn config;\r\n\t},\r\n\terr => console.error(err)\r\n);\r\n\r\napi.interceptors.response.use(\r\n    res => {\r\n        return res.data;\r\n    },\r\n    err => {\r\n        if (err.response.status === 401) localStorage.removeItem(LOGIN_USER);\r\n\r\n        return Promise.reject(err);\r\n    }\r\n)\r\n\r\nexport default class API {\r\n\tsignUp = async body => {\r\n\t\tconst formData = new FormData();\r\n\r\n\t\tfor (const key in body) {\r\n\t\t\tformData.append(key, body[key]);\r\n\t\t}\r\n\r\n\t\treturn api.post(\"/users/create\", formData);\r\n\t};\r\n\r\n\tsignIn = async body => {\r\n\t\tconst formData = new FormData();\r\n\t\tfor (const key in body) {\r\n\t\t\tformData.append(key, body[key]);\r\n\t\t}\r\n\r\n\t\treturn api.post(\"/users/auth\", formData);\r\n\t};\r\n\r\n\tupdateProfile = async (body, id) => {\r\n\t\tconst formData = new FormData();\r\n\t\tfor (const key in body) {\r\n\t\t\tformData.append(key, body[key]);\r\n\t\t}\r\n\t\treturn api.put(`/users/update/${id}`, formData, { requireToken: true });\r\n\t};\r\n\r\n\tupdateBudget = async (body, id) => {\r\n\t\tconst formData = new FormData();\r\n\t\tformData.append('budget', body);\r\n\t\treturn api.put(`/users/updateBudget/${id}`, formData, { requireToken: true });\r\n\t};\r\n\r\n\t// Transactions\r\n\tgetTransactions = (query) => {\r\n\t\tconst { page } = query;\r\n\t\treturn api\r\n\t\t\t.get(\"/moneyEntry/list\", {\r\n\t\t\t\trequireToken: true\r\n\t\t\t})\r\n\t};\r\n\r\n\taddTransactions = body => {\r\n\t\tconst formData = new FormData();\r\n\r\n\t\tfor (const key in body) {\r\n\t\t\tformData.append(key, body[key]);\r\n\t\t}\r\n\r\n\t\treturn api.post(\"/moneyEntry/create\", formData, {requireToken: true})\r\n\t};\r\n\r\n    updateTransactions = (body, id) => {\r\n\t\tconst formData = new FormData();\r\n\r\n\t\tfor (const key in body) {\r\n\t\t\tformData.append(key, body[key]);\r\n\t\t}\r\n\r\n\t\treturn api.put(`/moneyEntry/update/${id}`, formData, {requireToken: true})\r\n\t};\r\n\r\n    deleteTransactions = (id) => {\r\n\t\treturn api.delete(`/moneyEntry/delete/${id}`, {requireToken: true})\r\n\t};\r\n\r\n    getReportTransactions = async (params = {}) => {\r\n        return api.get(\"/moneyEntry/reports\", {\r\n            params,\r\n            requireToken: true\r\n        });\r\n    }\r\n\r\n\t// Categories\r\n\tgetCategories = () => {\r\n\t\treturn api\r\n\t\t\t.get(\"/categories/list\", {\r\n\t\t\t\trequireToken: true\r\n\t\t\t})\r\n\t};\r\n\r\n\tgetExpenseReport = () => {\r\n\t\treturn api.get('/moneyEntry/expense-reports', {\r\n\t\t\trequireToken: true\r\n\t\t});\r\n\t}\r\n\r\n\tgetLast4MonthsReport = () => {\r\n\t\treturn api.get('/moneyEntry/reports', {\r\n\t\t\trequireToken: true\r\n\t\t});\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}